CUSTOMER TABLE
—————————
CREATE TABLE Customer (
    customerId INT PRIMARY KEY,
    name VARCHAR(50),
    gmail VARCHAR(50),
    gender VARCHAR(10)
);

INSERT INTO Customer (customerId, name, gmail, gender)
VALUES
(1, 'Alice Johnson', 'alice.johnson@gmail.com', 'Female'),
(2, 'Bob Smith', 'bob.smith@example.com', 'Male'),
(3, 'Charlie Brown', 'charlie.brown@gmail.com', 'Male'),
(4, 'Daisy Miller', 'daisy.miller@gmail.com', 'Female'),
(5, 'Edward Davis', 'edward.davis@gmail.com', 'Male'),
(6, 'Fiona Green', 'fiona.green@gmail.com', 'Female'),
(7, 'George White', 'george.white@gmail.com', 'Male'),
(8, 'Hannah Lewis', 'hannah.lewis@gmail.com', 'Female'),
(9, 'Ian Clark', 'ian.clark@gmail.com', 'Male'),
(10, 'Jessica Young', 'jessica.young@gmail.com', 'Female');

ITEM TABLE
——————
CREATE TABLE Item (
    itemId INT PRIMARY KEY,
    itemName VARCHAR(50),
    description VARCHAR(200),
    weight VARCHAR(20),
    price DECIMAL(10,2)
);

INSERT INTO Item (itemId, itemName, description, weight, price) VALUES
(1, 'Apple', 'A fresh, juicy red apple.', '150g', 0.5),
(2, 'Banana', 'A ripe, sweet banana.', '120g', 0.3),
(3, 'Carrot', 'A crunchy, organic carrot.', '200g', 0.4),
(4, 'Steak', 'A tender, grass-fed beef steak.', '500g', 15.0),
(5, 'Salmon Fillet', 'A fresh, wild-caught salmon fillet.', '300g', 12.0),
(6, 'Broccoli', 'A head of organic broccoli.', '250g', 0.5),
(7, 'Almonds', 'A pack of raw, unsalted almonds.', '100g', 3.0),
(8, 'Yogurt', 'A cup of creamy, Greek yogurt.', '200g', 1.5),
(9, 'Whole Wheat Bread', 'A loaf of freshly baked whole wheat bread.', '400g', 2.5),
(10, 'Cheddar Cheese', 'A block of aged cheddar cheese.', '250g', 5.0);

ORDERS  TABLE
————————
CREATE TABLE Orders (
    orderId INT PRIMARY KEY,
    customerId INT,
    itemId INT,
    quantity INT,
    amount DECIMAL(10,2),
    orderDate DATE,
    FOREIGN KEY (customerId) REFERENCES Customer(customerId),
    FOREIGN KEY (itemId) REFERENCES Item(itemId)
);

INSERT INTO Orders (orderId, customerId, itemId, quantity, amount, orderDate)
VALUES
(1, 1, 3, 2, 0.8, '2024-01-05'),
(2, 1, 5, 1, 12.0, '2024-01-10'),
(3, 1, 7, 3, 9.0, '2024-01-20'),
(4, 2, 2, 4, 1.2, '2024-02-01'),
(5, 2, 4, 2, 30.0, '2024-02-14'),
(6, 2, 9, 1, 2.5, '2024-02-20'),
(7, 3, 1, 5, 2.5, '2024-03-05'),
(8, 3, 6, 1, 1.2, '2024-03-15'),
(9, 3, 10, 2, 10.0, '2024-03-28'),
(10, 4, 8, 3, 4.5, '2024-01-15'),
(11, 5, 3, 1, 0.4, '2024-02-05'),
(12, 6, 7, 2, 6.0, '2024-01-25'),
(13, 7, 9, 1, 2.5, '2024-02-18'),
(14, 8, 4, 1, 15.0, '2024-03-10'),
(15, 9, 2, 2, 0.6, '2024-03-25');


Queriues
————
1) find the most sold item.

SELECT i.itemName, SUM(o.quantity) AS totalQuantitySold
FROM Item i
JOIN Orders o ON i.itemId = o.itemId
GROUP BY i.itemId, i.itemName
ORDER BY totalQuantitySold DESC;

2) Give the list of customer who placed the max order in a month.

SELECT c.name, COUNT * AS orderCount 
FROM Customer c 
JOIN Orders o ON c.customerId = o.customerId 
GROUP BY c.customerId, c.name 
HAVING orderCount = ( 
SELECT MAX(orderCount) 
FROM (
SELECT COUNT * AS orderCount
FROM Orders
GROUP BY customerId
)  AS max_orders_by_customer
);

3) Find out the total count of orders in a month.

SELECT YEAR(orderDate) AS year, MONTH(orderDate) AS month, COUNT(*) AS totalOrders
FROM Orders
GROUP BY YEAR(orderDate), MONTH(orderDate)
ORDER BY year, month;

